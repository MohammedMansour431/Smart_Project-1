
Smart_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d70  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c7  00000000  00000000  00001a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000168  00000000  00000000  00002230  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057a  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008e0  00000000  00000000  00002912  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000031f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  64:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <bluetooth_init_module>:
/*                    function definitions                              */
/************************************************************************/
void bluetooth_init_module (void)
{
	/*This function is responsible for initializing the UART module with specific baud rate*/
	 muart_init(MUART_BAUDRATE_9600);	
  6c:	87 e6       	ldi	r24, 0x67	; 103
  6e:	90 e0       	ldi	r25, 0x00	; 0
  70:	0e 94 31 01 	call	0x262	; 0x262 <muart_init>
  74:	08 95       	ret

00000076 <bluetooth_recvByte>:
/*This function is responsible for sending one byte of data over bluetooth peripheral*/
void bluetooth_recvByte(u8_t* pu8_dataByte)
{
	
	/*This function is responsible for sending one byte of data over UART peripheral*/
	muart_recvByte (pu8_dataByte);
  76:	0e 94 38 01 	call	0x270	; 0x270 <muart_recvByte>
  7a:	08 95       	ret

0000007c <main>:

#define F_CPU  16000000UL
#include "util/delay.h"

	int main(void)
	{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
		 u8_t motor1=0;
  86:	19 82       	std	Y+1, r1	; 0x01
		u8_t recvdata =0;
		
	/* spi input output port*/
		mdio_setPinStatus(PORTB,(PIN4|PIN5|PIN7),OUTPUT);
  88:	42 e0       	ldi	r20, 0x02	; 2
  8a:	60 eb       	ldi	r22, 0xB0	; 176
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	0e 94 7d 00 	call	0xfa	; 0xfa <mdio_setPinStatus>
		mdio_setPinStatus(PORTB,PIN6,INPUT_FLOAT);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	60 e4       	ldi	r22, 0x40	; 64
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 7d 00 	call	0xfa	; 0xfa <mdio_setPinStatus>
	
	 /*UART tx and rx pins  */
		mdio_setPinStatus(PORTD,PIN0,INPUT_FLOAT);
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	0e 94 7d 00 	call	0xfa	; 0xfa <mdio_setPinStatus>
		mdio_setPinStatus(PORTD,PIN1,OUTPUT);
  a6:	42 e0       	ldi	r20, 0x02	; 2
  a8:	62 e0       	ldi	r22, 0x02	; 2
  aa:	83 e0       	ldi	r24, 0x03	; 3
  ac:	0e 94 7d 00 	call	0xfa	; 0xfa <mdio_setPinStatus>
		mdio_setPinStatus(PORTA,PIN1,OUTPUT);
  b0:	42 e0       	ldi	r20, 0x02	; 2
  b2:	62 e0       	ldi	r22, 0x02	; 2
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	0e 94 7d 00 	call	0xfa	; 0xfa <mdio_setPinStatus>

		/*define bluetooth Baudrate speed*/
		// muart_init(MUART_BAUDRATE_9600 );
	     bluetooth_init_module();
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <bluetooth_init_module>
	  	/*initialization  Fun  SPI  */
	     mspi_init(MSPI_MASTER_MODE,MSPI_MSB_FIRST,MSPI_SAMPLE_R_SETUP_F,MSPI_CLK_BY_16);
  be:	23 e0       	ldi	r18, 0x03	; 3
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 0b 01 	call	0x216	; 0x216 <mspi_init>
    /* Replace with your application code */
   
    while (1) 
    {
		// bluetooth_init_module(MUART_BAUDRATE_9600,motor1); 
		bluetooth_recvByte(&motor1);
  ca:	ce 01       	movw	r24, r28
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	0e 94 3b 00 	call	0x76	; 0x76 <bluetooth_recvByte>
		// bluetooth_recvByte( motor1); 
		
	     if(motor1)
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	88 23       	and	r24, r24
  d6:	c9 f3       	breq	.-14     	; 0xca <main+0x4e>
		 {
			mdio_setPinValue(PORTB,PIN4,LOW);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	60 e1       	ldi	r22, 0x10	; 16
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 cb 00 	call	0x196	; 0x196 <mdio_setPinValue>
			mspi_masterSendRecvByte(motor1,(void *)0);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	0e 94 21 01 	call	0x242	; 0x242 <mspi_masterSendRecvByte>
			mdio_setPinValue(PORTB,PIN4,HIGH);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	60 e1       	ldi	r22, 0x10	; 16
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 cb 00 	call	0x196	; 0x196 <mdio_setPinValue>
			motor1 = 0;
  f6:	19 82       	std	Y+1, r1	; 0x01
  f8:	e8 cf       	rjmp	.-48     	; 0xca <main+0x4e>

000000fa <mdio_setPinStatus>:
/************************************************************************/

void mdio_setPinStatus( u8_t  au8_port , u8_t au8_pin , u8_t au8_pinStatus)
{
	/*Switching over the ports*/
	switch(au8_port)
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	e1 f0       	breq	.+56     	; 0x136 <mdio_setPinStatus+0x3c>
  fe:	18 f0       	brcs	.+6      	; 0x106 <mdio_setPinStatus+0xc>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	89 f1       	breq	.+98     	; 0x166 <mdio_setPinStatus+0x6c>
 104:	08 95       	ret
	{/*In case portA */
	case PORTA:
	
	/* switching over pin  status*/
	switch(au8_pinStatus)	
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	49 f0       	breq	.+18     	; 0x11c <mdio_setPinStatus+0x22>
 10a:	18 f0       	brcs	.+6      	; 0x112 <mdio_setPinStatus+0x18>
 10c:	42 30       	cpi	r20, 0x02	; 2
 10e:	79 f0       	breq	.+30     	; 0x12e <mdio_setPinStatus+0x34>
 110:	08 95       	ret
		{
		/*In case of input float*/
		case INPUT_FLOAT:
			
			/*Clearing the corresponding bits in DDR register*/
			MDIO_DDRA &= ~au8_pin;
 112:	8a b3       	in	r24, 0x1a	; 26
 114:	60 95       	com	r22
 116:	68 23       	and	r22, r24
 118:	6a bb       	out	0x1a, r22	; 26
				break;
 11a:	08 95       	ret
			
		/*In case of input pullup*/
		case INPUT_PULLUP:
			
			/*Clearing the corresponding bits in DDR register*/
			MDIO_DDRA  &= ~au8_pin;		
 11c:	8a b3       	in	r24, 0x1a	; 26
 11e:	96 2f       	mov	r25, r22
 120:	90 95       	com	r25
 122:	89 23       	and	r24, r25
 124:	8a bb       	out	0x1a, r24	; 26
			/*Setting the corresponding bits in PORT register*/
			MDIO_PORTA |= au8_pin;
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	68 2b       	or	r22, r24
 12a:	6b bb       	out	0x1b, r22	; 27
				break;
 12c:	08 95       	ret
			
		/*In case of output*/
		case OUTPUT:

			/*Setting the corresponding bits in DDR register*/
			MDIO_DDRA |= au8_pin;
 12e:	8a b3       	in	r24, 0x1a	; 26
 130:	68 2b       	or	r22, r24
 132:	6a bb       	out	0x1a, r22	; 26
				break;
 134:	08 95       	ret
		break;
	/*In case of PORTB*/
		case PORTB:
			
			/*Switching over pin status*/
			switch(au8_pinStatus)
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	49 f0       	breq	.+18     	; 0x14c <mdio_setPinStatus+0x52>
 13a:	18 f0       	brcs	.+6      	; 0x142 <mdio_setPinStatus+0x48>
 13c:	42 30       	cpi	r20, 0x02	; 2
 13e:	79 f0       	breq	.+30     	; 0x15e <mdio_setPinStatus+0x64>
 140:	08 95       	ret
			{
				/*In case of input float*/
				case INPUT_FLOAT:
					
					/*Clearing the corresponding bits in DDR register*/
					MDIO_DDRB &= ~au8_pin; 
 142:	87 b3       	in	r24, 0x17	; 23
 144:	60 95       	com	r22
 146:	68 23       	and	r22, r24
 148:	67 bb       	out	0x17, r22	; 23
					break;
 14a:	08 95       	ret
				
				/*In case of input pullup*/				
				case INPUT_PULLUP:
					
					/*Clearing the corresponding bits in DDR register*/					
					MDIO_DDRB  &= ~au8_pin;
 14c:	87 b3       	in	r24, 0x17	; 23
 14e:	96 2f       	mov	r25, r22
 150:	90 95       	com	r25
 152:	89 23       	and	r24, r25
 154:	87 bb       	out	0x17, r24	; 23
					
					/*Setting the corresponding bits in PORT register*/
					MDIO_PORTB |= au8_pin;
 156:	88 b3       	in	r24, 0x18	; 24
 158:	68 2b       	or	r22, r24
 15a:	68 bb       	out	0x18, r22	; 24
					break;
 15c:	08 95       	ret
				
				/*In case of output*/
				case OUTPUT:

					/*Setting the corresponding bits in DDR register*/
					MDIO_DDRB |= au8_pin;
 15e:	87 b3       	in	r24, 0x17	; 23
 160:	68 2b       	or	r22, r24
 162:	67 bb       	out	0x17, r22	; 23
					break;
 164:	08 95       	ret
	
	/*In case of PORTD*/
		case PORTD:
			
			/*Switching over pin status*/
			switch(au8_pinStatus)
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	49 f0       	breq	.+18     	; 0x17c <mdio_setPinStatus+0x82>
 16a:	18 f0       	brcs	.+6      	; 0x172 <mdio_setPinStatus+0x78>
 16c:	42 30       	cpi	r20, 0x02	; 2
 16e:	79 f0       	breq	.+30     	; 0x18e <mdio_setPinStatus+0x94>
 170:	08 95       	ret
			{
				/*In case of input float*/
				case INPUT_FLOAT:
					
					/*Clearing the corresponding bits in DDR register*/
					MDIO_DDRD &= ~au8_pin; 
 172:	81 b3       	in	r24, 0x11	; 17
 174:	60 95       	com	r22
 176:	68 23       	and	r22, r24
 178:	61 bb       	out	0x11, r22	; 17
					break;
 17a:	08 95       	ret
				
				/*In case of input pullup*/				
				case INPUT_PULLUP:
					
					/*Clearing the corresponding bits in DDR register*/					
					MDIO_DDRD  &= ~au8_pin;
 17c:	81 b3       	in	r24, 0x11	; 17
 17e:	96 2f       	mov	r25, r22
 180:	90 95       	com	r25
 182:	89 23       	and	r24, r25
 184:	81 bb       	out	0x11, r24	; 17
					
					/*Setting the corresponding bits in PORT register*/
					MDIO_PORTD |= au8_pin;
 186:	82 b3       	in	r24, 0x12	; 18
 188:	68 2b       	or	r22, r24
 18a:	62 bb       	out	0x12, r22	; 18
					break;
 18c:	08 95       	ret
				
				/*In case of output*/
				case OUTPUT:

					/*Setting the corresponding bits in DDR register*/
					MDIO_DDRD |= au8_pin;
 18e:	81 b3       	in	r24, 0x11	; 17
 190:	68 2b       	or	r22, r24
 192:	61 bb       	out	0x11, r22	; 17
 194:	08 95       	ret

00000196 <mdio_setPinValue>:


void mdio_setPinValue(u8_t au8_port, u8_t au8_pin, u8_t au8_pinValue)
{
	/*Switching over the DIO ports*/
	switch(au8_port)
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	a1 f0       	breq	.+40     	; 0x1c2 <mdio_setPinValue+0x2c>
 19a:	28 f0       	brcs	.+10     	; 0x1a6 <mdio_setPinValue+0x10>
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	f9 f0       	breq	.+62     	; 0x1de <mdio_setPinValue+0x48>
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	59 f1       	breq	.+86     	; 0x1fa <mdio_setPinValue+0x64>
 1a4:	08 95       	ret
	{
		/*In case of PORTA*/
		case PORTA:
			
			/*Switching over pin value*/
			switch(au8_pinValue)
 1a6:	44 23       	and	r20, r20
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <mdio_setPinValue+0x1a>
 1aa:	41 30       	cpi	r20, 0x01	; 1
 1ac:	31 f0       	breq	.+12     	; 0x1ba <mdio_setPinValue+0x24>
 1ae:	08 95       	ret
			{
			/*In case of low*/
			case LOW:
					
					/*Clearing the corresponding bits in PORT register*/
					MDIO_PORTA &= ~au8_pin; 
 1b0:	8b b3       	in	r24, 0x1b	; 27
 1b2:	60 95       	com	r22
 1b4:	68 23       	and	r22, r24
 1b6:	6b bb       	out	0x1b, r22	; 27
					break;
 1b8:	08 95       	ret
				
			/*In case of high*/				
			case HIGH:
					
					/*Setting the corresponding bits in PORT register*/
					MDIO_PORTA |= au8_pin;
 1ba:	8b b3       	in	r24, 0x1b	; 27
 1bc:	68 2b       	or	r22, r24
 1be:	6b bb       	out	0x1b, r22	; 27
					break;
 1c0:	08 95       	ret

		/*In case of PORTB*/
		case PORTB:
			
			/*Switching over pin value*/
			switch(au8_pinValue)
 1c2:	44 23       	and	r20, r20
 1c4:	19 f0       	breq	.+6      	; 0x1cc <mdio_setPinValue+0x36>
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <mdio_setPinValue+0x40>
 1ca:	08 95       	ret
			{
				/*In case of low*/
				case LOW:
					
					/*Clearing the corresponding bits in PORT register*/
					MDIO_PORTB &= ~au8_pin; 
 1cc:	88 b3       	in	r24, 0x18	; 24
 1ce:	60 95       	com	r22
 1d0:	68 23       	and	r22, r24
 1d2:	68 bb       	out	0x18, r22	; 24
					break;
 1d4:	08 95       	ret
				
				/*In case of high*/				
				case HIGH:
					
					/*Setting the corresponding bits in PORT register*/
					MDIO_PORTB |= au8_pin;
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	68 2b       	or	r22, r24
 1da:	68 bb       	out	0x18, r22	; 24
					break;
 1dc:	08 95       	ret

		/*In case of PORTC*/
		case PORTC:
			
			/*Switching over pin value*/
			switch(au8_pinValue)
 1de:	44 23       	and	r20, r20
 1e0:	19 f0       	breq	.+6      	; 0x1e8 <mdio_setPinValue+0x52>
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	31 f0       	breq	.+12     	; 0x1f2 <mdio_setPinValue+0x5c>
 1e6:	08 95       	ret
			{
				/*In case of low*/
				case LOW:
					
					/*Clearing the corresponding bits in PORT register*/
					MDIO_PORTC &= ~au8_pin; 
 1e8:	85 b3       	in	r24, 0x15	; 21
 1ea:	60 95       	com	r22
 1ec:	68 23       	and	r22, r24
 1ee:	65 bb       	out	0x15, r22	; 21
					break;
 1f0:	08 95       	ret
				
				/*In case of high*/				
				case HIGH:
					
					/*Setting the corresponding bits in PORT register*/
					MDIO_PORTC |= au8_pin;
 1f2:	85 b3       	in	r24, 0x15	; 21
 1f4:	68 2b       	or	r22, r24
 1f6:	65 bb       	out	0x15, r22	; 21
					break;
 1f8:	08 95       	ret

		/*In case of PORTD*/
		case PORTD:
			
			/*Switching over pin value*/
			switch(au8_pinValue)
 1fa:	44 23       	and	r20, r20
 1fc:	19 f0       	breq	.+6      	; 0x204 <mdio_setPinValue+0x6e>
 1fe:	41 30       	cpi	r20, 0x01	; 1
 200:	31 f0       	breq	.+12     	; 0x20e <mdio_setPinValue+0x78>
 202:	08 95       	ret
			{
				/*In case of low*/
				case LOW:
					
					/*Clearing the corresponding bits in PORT register*/
					MDIO_PORTD &= ~au8_pin; 
 204:	82 b3       	in	r24, 0x12	; 18
 206:	60 95       	com	r22
 208:	68 23       	and	r22, r24
 20a:	62 bb       	out	0x12, r22	; 18
					break;
 20c:	08 95       	ret
				
				/*In case of high*/				
				case HIGH:
					
					/*Setting the corresponding bits in PORT register*/
					MDIO_PORTD |= au8_pin;
 20e:	82 b3       	in	r24, 0x12	; 18
 210:	68 2b       	or	r22, r24
 212:	62 bb       	out	0x12, r22	; 18
 214:	08 95       	ret

00000216 <mspi_init>:
/************************************************************************/

void mspi_init(u8_t au8_spiMode, u8_t au8_dataOutMode, u8_t au8_clockMode, u8_t au8_spiSpeed)
{
	/*Clear the control register*/
	MSPI_SPCR = 0;
 216:	1d b8       	out	0x0d, r1	; 13
	
	/*Checking if the SPI speed to enable the SPI2X bit or not*/
	if((au8_spiSpeed % 2) == 0)
 218:	20 ff       	sbrs	r18, 0
	{
		/*Enable the SPI double clock speed*/
		SET_BIT(MSPI_SPSR, 0);
 21a:	70 9a       	sbi	0x0e, 0	; 14
	{
		/*Do nothing*/
	}

	/*Set the SPI control register, (0x40) -> Enable SPI operations*/
	MSPI_SPCR |= (0x40) | (au8_dataOutMode << 5) | (au8_spiMode << 4) | (au8_clockMode << 2) | (au8_spiSpeed / 2);
 21c:	9d b1       	in	r25, 0x0d	; 13
 21e:	44 0f       	add	r20, r20
 220:	44 0f       	add	r20, r20
 222:	90 64       	ori	r25, 0x40	; 64
 224:	49 2b       	or	r20, r25
 226:	30 e1       	ldi	r19, 0x10	; 16
 228:	83 9f       	mul	r24, r19
 22a:	c0 01       	movw	r24, r0
 22c:	11 24       	eor	r1, r1
 22e:	84 2b       	or	r24, r20
 230:	90 e2       	ldi	r25, 0x20	; 32
 232:	69 9f       	mul	r22, r25
 234:	b0 01       	movw	r22, r0
 236:	11 24       	eor	r1, r1
 238:	68 2b       	or	r22, r24
 23a:	26 95       	lsr	r18
 23c:	26 2b       	or	r18, r22
 23e:	2d b9       	out	0x0d, r18	; 13
 240:	08 95       	ret

00000242 <mspi_masterSendRecvByte>:
{
	/*Variable used in timing out operations*/
	u8_t au8_timeOut = 0;
	
	/*Send data through SPI bus from master to slave*/
	MSPI_SPDR = au8_sendData;
 242:	8f b9       	out	0x0f, r24	; 15
	
	/*Wait until the SPI transmission ends*/
	while((GET_BIT(MSPI_SPSR, 7) == 0) && (au8_timeOut < TIMEOUT_DELAY))
 244:	77 99       	sbic	0x0e, 7	; 14
 246:	09 c0       	rjmp	.+18     	; 0x25a <mspi_masterSendRecvByte+0x18>
 248:	84 e6       	ldi	r24, 0x64	; 100
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	95 e0       	ldi	r25, 0x05	; 5
 24c:	9a 95       	dec	r25
 24e:	f1 f7       	brne	.-4      	; 0x24c <mspi_masterSendRecvByte+0xa>
 250:	00 00       	nop
 252:	77 99       	sbic	0x0e, 7	; 14
 254:	02 c0       	rjmp	.+4      	; 0x25a <mspi_masterSendRecvByte+0x18>
 256:	81 50       	subi	r24, 0x01	; 1
 258:	c1 f7       	brne	.-16     	; 0x24a <mspi_masterSendRecvByte+0x8>
		/*Wait for 1 microseconds*/
		_delay_us(1);
	}
	
	/*Get the received data from slave*/
	*pu8_recvData = MSPI_SPDR;
 25a:	8f b1       	in	r24, 0x0f	; 15
 25c:	fb 01       	movw	r30, r22
 25e:	80 83       	st	Z, r24
 260:	08 95       	ret

00000262 <muart_init>:
		au8_loopingVar++;
	}
	
	/*Return from this function*/
	return;
}
 262:	28 e1       	ldi	r18, 0x18	; 24
 264:	2a b9       	out	0x0a, r18	; 10
 266:	26 e8       	ldi	r18, 0x86	; 134
 268:	20 bd       	out	0x20, r18	; 32
 26a:	89 b9       	out	0x09, r24	; 9
 26c:	90 bd       	out	0x20, r25	; 32
 26e:	08 95       	ret

00000270 <muart_recvByte>:

void muart_recvByte(u8_t* pu8_dataByte)
{
	/*Checking if there's any data received in UDR register*/
	if(GET_BIT(MUART_UCSRA, 7))
 270:	5f 9b       	sbis	0x0b, 7	; 11
 272:	03 c0       	rjmp	.+6      	; 0x27a <muart_recvByte+0xa>
	{
		/*Get the data*/
		*pu8_dataByte = MUART_UDR;	
 274:	2c b1       	in	r18, 0x0c	; 12
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
